apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: vault-workflow-template
  namespace: argo
spec:
  entrypoint: vault-workflow
  podGC:
    strategy: OnWorkflowSuccess
  templates:
  - name: vault-workflow
    inputs:
      parameters:
      - name: env
      - name: server-url
      - name: vault-url
      artifacts:
      - name: kube-config
    steps:
    - - name: kubectl-unseal-vault
        templateRef:
          name: vault-base-template
          template: vault-base
        arguments:
          parameters:
          - name: script
            value: |

              if kubectl get secret unseal-keys -n vault
              then
                echo "Keys found in secret"
                exit 0;
              fi

              export VAULTAMOUNT=$(kubectl get pods -n vault -o=name | grep 'tooling-vault-[0-9]' | wc -l);

              for i in `seq 0 $(($VAULTAMOUNT-1))`;
              do
                while [[ $(kubectl get pods tooling-vault-$i -n vault -o 'jsonpath={.status.phase}') != "Running" ]]; do echo "waiting for vault-$i" && sleep 5; done;
              done

              echo "Starting vault init";
              sleep 30;

              
              echo "trying to gen keys from vault-0"
              kubectl exec -i tooling-vault-0 -n vault -- vault operator init -format=json > cluster-keys.json || true;
              sleep 10;
              if [ -s cluster-keys.json ]; 
              then
                echo "Got the keys from vault-0";
                break;
              else
                echo "Failed to get keys" >&2;
                exit 69;
              fi
              sleep 10;

              echo "Unsealing vault..";
              for i in `seq 0 $(($VAULTAMOUNT-1))`;
              do
                if [ ! $i == 0 ]
                then 
                  echo "Joining tooling-vault-$i";
                  if ! kubectl exec -i tooling-vault-$i -n vault -- vault operator raft join http://tooling-vault-0.tooling-vault-internal:8200;
                  then
                    exit 70;
                  fi
                  sleep 20;
                fi
                for j in `seq 0 2`;
                do
                  if kubectl exec -i tooling-vault-$i -n vault -- vault operator unseal $(cat cluster-keys.json | jq -r ".unseal_keys_b64[$j]");
                  then 
                    sleep 15;
                  else
                    exit 71;
                  fi
                done
              done
              kubectl create secret generic unseal-keys --from-file=cluster-keys.json -n vault --dry-run=client -o yaml | kubectl apply -n vault -f -;
          artifacts:
          - name: kube-config
            from: '{{inputs.artifacts.kube-config}}'

    - - name: kubectl-init-secrets
        templateRef:
          name: vault-logged-in-template
          template: vault-logged-in
        arguments:
          parameters:
          - name: script
            value: |
              kubectl exec -i tooling-vault-0 -n vault -- vault secrets enable -path=k8s kv-v2;
              kubectl exec -i tooling-vault-0 -n vault -- vault auth enable kubernetes;
              kubectl exec -i tooling-vault-0 -n vault -- vault policy write k8s-secrets - <<EOF
                path "k8s/*" {
                  capabilities = ["read"]
                }
              EOF
              kubectl exec -i tooling-vault-0 -n vault -- vault write auth/kubernetes/role/k8s-secrets bound_service_account_names=argo,argo-server,argocd-server,default bound_service_account_namespaces=argo,argocd policies=k8s-secrets ttl=24h;
              export VAULT_SA_NAME=$(kubectl -n vault get sa tooling-vault -o jsonpath="{.secrets[*]['name']}");
              export SA_JWT_TOKEN=$(kubectl -n vault get secret $VAULT_SA_NAME -o jsonpath="{.data.token}" | base64 -d; echo);
              export SA_CA_CRT=$(kubectl -n default get secret $VAULT_SA_NAME -o jsonpath="{.data['ca\.crt']}" | base64 -d; echo);
              kubectl exec -i tooling-vault-0 -n vault -- sh -c "vault write auth/kubernetes/config token_reviewer_jwt=\"$SA_JWT_TOKEN\" kubernetes_host=\"https://kubernetes.default:443\" kubernetes_ca_cert=\"$SA_CA_CRT\"";
          artifacts:
          - name: kube-config
            from: '{{inputs.artifacts.kube-config}}'
      
    - - name: kubectl-add-secrets
        templateRef:
          name: vault-logged-in-template
          template: vault-logged-in
        arguments:
          parameters:
          - name: script
            value: |
              kubectl exec -i tooling-vault-0 -n vault -- vault kv {{item.action}} {{item.keyPath}} {{item.values}};
          artifacts:
          - name: kube-config
            from: '{{inputs.artifacts.kube-config}}'
        withItems:
        - {
            keyPath: k8s/secrets/github-ssh,
            action: put,
            values: "github=@/tmp/id_rsa github.pub=@/tmp/id_rsa.pub"
          }
        - {
            keyPath: k8s/configs/server-url,
            action: put,
            values: "url={{inputs.parameters.server-url}}"
          }
        - {
            keyPath: k8s/configs/vault-url,
            action: put,
            values: "url={{inputs.parameters.vault-url}}"
          }
        - {
            keyPath: k8s/secrets/harbor,
            action: put,
            values: "username=$harborUser password=$harborPass"
          }
        - {
            keyPath: k8s/secrets/vault,
            action: put,
            values: "root_token=$roottoken"
          }
        - {
            keyPath: k8s/oauth/creds,
            action: put,
            values: "argocd=$oauth_argocd 
            argowf=$oauth_argowf 
            grafana=$oauth_grafana 
            harbor=$oauth_harbor 
            vault=$oauth_vault
            tenantid=$oauth_tenant_id
            clientid=$oauth_client_id"
          }
        - {
          keyPath: k8s/configs/env,
          action: put,
          values: "env={{inputs.parameters.env}}"
          }
