apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: vault-logged-in-template
  namespace: argo
spec:
  entrypoint: vault-logged-in
  templates:
    - name: vault-logged-in
      inputs:
        parameters:
        - name: script
        artifacts:
        - name: kube-config
          path: /.kube/config
        - name: kubectl
          path: /bin/kubectl
          mode: 0755
          http:
            url: https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
        - name: jq
          path: /bin/jq
          mode: 0755
          http:
            url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "k8s-secrets"
          vault.hashicorp.com/agent-inject-secret-id_rsa: "k8s/data/secrets/github-ssh"
          vault.hashicorp.com/secret-volume-path-id_rsa: "/vault/github"
          vault.hashicorp.com/agent-inject-template-id_rsa: |
            {{- with secret "k8s/data/secrets/github-ssh" -}}
            {{ .Data.data.github }}
            {{- end -}}
          vault.hashicorp.com/agent-inject-secret-id_rsa.pub: "k8s/data/secrets/github-ssh"
          vault.hashicorp.com/secret-volume-path-id_rsa.pub: "/vault/github"
          vault.hashicorp.com/agent-inject-template-id_rsa.pub: |
            {{- with secret "k8s/data/secrets/github-ssh" -}}
            {{ .Data.data.githubpub }}
            {{- end -}}
          vault.hashicorp.com/agent-inject-secret-harbor-creds: "k8s/data/secrets/harbor"
          vault.hashicorp.com/agent-inject-template-harbor-creds: |
            {{ with secret "k8s/data/secrets/harbor" -}}
              export harborUser="{{ .Data.data.username }}"
              export harborPass="{{ .Data.data.password }}"
            {{- end }}
          vault.hashicorp.com/agent-inject-secret-oauth-creds: "k8s/data/oauth/creds"
          vault.hashicorp.com/agent-inject-template-oauth-creds: |
            {{ with secret "k8s/data/oauth/creds" -}}
              export oauth_argocd="{{ .Data.data.argocd }}"
              export oauth_argowf="{{ .Data.data.argowf }}"
              export oauth_grafana="{{ .Data.data.grafana }}"
              export oauth_harbor="{{ .Data.data.harbor }}"
              export oauth_vault="{{ .Data.data.vault }}"
              export oauth_tenant_id="{{ .Data.data.tenantid }}"
              export oauth_client_id="{{ .Data.data.clientid }}"
            {{- end }}
      container:
        image: alpine
        command:
          - "/bin/sh"
          - "-c"
        args:
          - >
            export KUBECONFIG=/.kube/config;
            for f in /vault/secrets/*; do source $f; done;

            kubectl cp /vault/github/id_rsa vault/tooling-vault-0:/tmp/id_rsa;
            kubectl cp /vault/github/id_rsa.pub vault/tooling-vault-0:/tmp/id_rsa.pub;

            export roottoken=$(kubectl get secrets unseal-keys -o 'jsonpath={.data.cluster-keys\.json}' -n vault | base64 -d | jq -r ".root_token");
            kubectl exec -i tooling-vault-0 -n vault -- vault login $roottoken -no-print=true 1>/dev/null;
            {{inputs.parameters.script}}