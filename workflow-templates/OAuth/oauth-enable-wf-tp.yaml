apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: oauth-enable-wf-tp
  namespace: argo
spec:
  entrypoint: oauth-enable-wf
  podGC:
    strategy: OnWorkflowSuccess
  templates:
    - name: oauth-enable-wf 
      steps:
      - - name: get-server-url
          templateRef:
            name: utility-get-server-url 
            template: get-server-url

        - name: get-kubeconf
          templateRef:
            name: az-aks-cred-template
            template: az-aks-cred

      - - name: oauth-enable
          templateRef:
            name: oauth-enable-single-app-wf-tp
            template: oauth-enable-single-app-wf
          arguments:
            artifacts:
              - name: kube-config
                from: '{{steps.get-kubeconf.outputs.artifacts.kube-config}}'
            parameters:
              - name: server-url
                value: '{{steps.get-server-url.outputs.parameters.server-url}}'
              - name: repo
                value: '{{item.repo}}'
              - name: script
                value: '{{item.script}}'
          withItems: 
          - {
            repo: git@github.com:Open-Dataplatform/tooling-grafana.git,
            script:
              j2 /repo/.setup/oauth-values.j2 -o j2-tmp.yaml;
              argocd app get tooling-grafana -o yaml | yq e .spec.source.helm.values - > tmp.yaml;
              yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' tmp.yaml j2-tmp.yaml;
              argocd app set tooling-grafana --values-literal-file tmp.yaml;
            }
          - {
            repo: git@github.com:Open-Dataplatform/tooling-argo-wf.git,
            script:
              j2 /repo/.setup/oauth-values.j2 -o j2-tmp.yaml;
              argocd app get tooling-argo-wf -o yaml | yq e .spec.source.helm.values - > tmp.yaml;
              yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' tmp.yaml j2-tmp.yaml;
              argocd app set tooling-argo-wf --values-literal-file tmp.yaml;

              kubectl create secret generic argo-server-sso -n argo --from-literal=clientsecret=$oauth_argowf --from-literal=clientid=$oauth_client_id --save-config --dry-run=client -o yaml | kubectl apply -f -;
            }          
          
        - name: oauth-harbor
          templateRef:
            name: tooling-harbor-enable-oauth-tp
            template: enable-oauth
        
      # OBS! has to be the last in the list, disableds the admin user in argocd - that user is used in the automated configurations.
      - - name: oauth-enable-argocd
          templateRef:
            name: oauth-enable-argocd-app-wf-tp
            template: oauth-enable-argocd-wf
          arguments:
            parameters:
              - name: repo
                value: 'git@github.com:Open-Dataplatform/tooling-argo-cd.git'
              - name: server-url
                value: '{{steps.get-server-url.outputs.parameters.server-url}}'
            artifacts:
              - name: kube-config
                from: '{{steps.get-kubeconf.outputs.artifacts.kube-config}}'