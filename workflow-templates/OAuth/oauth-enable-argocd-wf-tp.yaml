apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: oauth-enable-argocd-app-wf-tp
  namespace: argo
spec:
  entrypoint: oauth-enable-argocd-wf
  podGC:
    strategy: OnWorkflowSuccess
  templates:
    - name: oauth-enable-argocd-wf
      inputs:
        parameters:
          - name: repo
          - name: server-url
        artifacts:
          - name: kube-config
      steps:
        - - name: git-clone
            templateRef:
              name: git-clone-template
              template: git-clone
            arguments:
              parameters:
              - name: ssh-url
                value: '{{inputs.parameters.repo}}'

        - - name: gen-values
            template: gen-values
            arguments:
              parameters:
              - name: server-url
                value: '{{inputs.parameters.server-url}}'
              - name: script
                value: |
                  j2 /repo/.setup/oauth-values.j2 -o /j2-tmp.yaml;
              artifacts:
              - name: repo
                from: '{{steps.git-clone.outputs.artifacts.repo}}'
        
        - - name: upgrade-helm
            template: upgrade-helm
            arguments:
              parameters:
              - name: server-url
                value: '{{inputs.parameters.server-url}}'
              - name: script
                value: |
                  kubectl get secret argocd-secret -n argocd -o json | jq --arg secret "$(echo -n $oauth_argocd | base64)" '.data."oidc.azure.clientSecret"=$secret' | kubectl apply -f -

                  helm get values tooling-argocd -n argocd -o yaml > tmp.yaml;
                  yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' tmp.yaml /j2-tmp.yaml;
                  helm upgrade tooling-argocd /repo/.helm --namespace argocd -f tmp.yaml
                  kubectl rollout restart deployment tooling-argocd-server -n argocd
              artifacts:
              - name: repo
                from: '{{steps.git-clone.outputs.artifacts.repo}}'
              - name: kube-config
                from: '{{inputs.artifacts.kube-config}}'
              - name: value-file
                from: '{{steps.gen-values.outputs.artifacts.value-file}}'

    - name: gen-values
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "k8s-secrets"
          vault.hashicorp.com/agent-inject-secret-oauth-creds: "k8s/data/oauth/creds"
          vault.hashicorp.com/agent-inject-template-oauth-creds: |
            {{ with secret "k8s/data/oauth/creds" -}}
              export oauth_tenant_id="{{ .Data.data.tenantid }}"
              export oauth_client_id="{{ .Data.data.clientid }}"
            {{- end }}
      inputs:
        parameters:
        - name: server-url
        - name: script
        artifacts:
        - name: repo
          path: /repo
      container:
        image: "{{inputs.parameters.server-url}}/tooling-j2cli/tooling-j2cli"
        command: ["/bin/sh", "-c"]
        args: 
          - |
            for f in /vault/**/*; do source $f; done;

            #Script
            {{inputs.parameters.script}}
      outputs:
        artifacts:
        - name: value-file
          path: '/j2-tmp.yaml'

    - name: upgrade-helm
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "k8s-secrets"
          vault.hashicorp.com/agent-inject-secret-oauth-creds: "k8s/data/oauth/creds"
          vault.hashicorp.com/agent-inject-template-oauth-creds: |
            {{ with secret "k8s/data/oauth/creds" -}}
              export oauth_argocd="{{ .Data.data.argocd }}"
            {{- end }}
      inputs:
        parameters:
        - name: server-url
        - name: script
        artifacts:
        - name: repo
          path: /repo
        - name: kube-config
          path: /.kube/config      
        - name: value-file
          path: /j2-tmp.yaml 
        - name: jq
          path: /bin/jq
          mode: 0755
          http:
            url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
        - name: yq
          path: /bin/yq
          mode: 0755
          http:
            url: 'https://github.com/mikefarah/yq/releases/download/v4.4.1/yq_linux_amd64'
        - name: kubectl
          path: /bin/kubectl
          mode: 0755
          http:
            url: https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
      container:
        image: alpine/helm
        command: ["/bin/sh", "-c"]
        args: 
          - |
            for f in /vault/**/*; do source $f; done;
            export KUBECONFIG=/.kube/config;
            export fqdn={{inputs.parameters.server-url}};
            
            #Script
            {{inputs.parameters.script}}