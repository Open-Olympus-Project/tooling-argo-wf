apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: service-cluster-deployment-template
  namespace: argo
spec:
  entrypoint: service-cluster-deployment
  podGC:
    strategy: OnWorkflowSuccess
  arguments:
    parameters:
      - name: environment_name
        value: mht
      - name: resource_group_name
        value: service-aks-infrastructure-{{workflow.parameters.environment_name}}
      - name: storage_account_name
        value: servicetfstate{{workflow.parameters.environment_name}}
      - name: container_name
        value: terraformstate
      - name: key
        value: k8s.tfstate
  templates:
    - name: service-cluster-deployment
      steps:
        - - name: terraform
            templateRef:
              name: terraform-workflow-template
              template: terraform-workflow
            arguments:
              parameters:
                - name: environmentName
                  value: mht

        - - name: helm
            templateRef:
              name: helm-workflow-template
              template: helm-workflow
            arguments:
              parameters:
                - name: ssh-url
                  value: '{{item.repo}}'
                - name: context
                  value: '{{item.context}}'
                - name: service
                  value: '{{item.service}}'
                - name: namespace
                  value: '{{item.namespace}}'
                - name: valuesScript
                  value: '{{item.valuesScript}}'
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'
                - name: values
                  from: '{{steps.terraform.outputs.artifacts.values}}'
            withItems:
              - {
                  context: 'k8s',
                  service: 'ingress-nginx',
                  namespace: 'ingress-nginx',
                  valuesScript: '-f /values/k8s-ingress-nginx-values.yaml',
                  repo: 'git@github.com:Open-Dataplatform/k8s-ingress-nginx.git',
                }
              - {
                  context: 'k8s',
                  service: 'cert-manager',
                  namespace: 'cert-manager',
                  valuesScript: ' ',
                  repo: 'git@github.com:Open-Dataplatform/k8s-certmanager.git',
                }
              - {
                  context: 'tooling',
                  service: 'argocd',
                  namespace: 'argocd',
                  valuesScript: '-f /values/tooling-argo-cd-values.yaml',
                  repo: 'git@github.com:Open-Dataplatform/tooling-argo-cd.git',
                }

          # Should use the helm wf repo?
          - name: clone-certmanager
            templateRef:
              name: git-clone-template
              template: git-clone
            arguments:
              parameters:
                - name: ssh-url
                  value: git@github.com:Open-Dataplatform/k8s-certmanager.git

        - - name: kubectl-cluster-issuer
            templateRef:
              name: kubectl-base-template
              template: kubectl-base
            arguments:
              parameters:
                - name: script
                  value: >
                    kubectl wait --for=condition=Available deployment/k8s-cert-manager-webhook -n cert-manager --timeout=120s;
                    while [[ $(kubectl get pods -l app=webhook -n cert-manager -o 'jsonpath={.items[*].status.phase}') != "Running" ]]; do echo "waiting for webhook" && sleep 10; done;
                    while [[ -z $(kubectl get validatingwebhookconfigurations k8s-cert-manager-webhook -o 'jsonpath={.webhooks[*].clientConfig.caBundle}') ]]; do echo "waiting for caBundle" && sleep 10; done;
                    kubectl apply -f ./cert-manager/clusterissuer.yaml -n cert-manager;
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'
                - name: repo
                  from: '{{steps.clone-certmanager.outputs.artifacts.repo}}'

        - - name: kubectl-wait-argocd
            templateRef:
              name: kubectl-base-template
              template: kubectl-base
            arguments:
              parameters:
                - name: script
                  value: >
                    kubectl wait --for=condition=Available deployment/tooling-argocd-server -n argocd --timeout=120s;
                    sh /scripts/check-endpoint.sh k8s-ingress-nginx-controller ingress-nginx;
                    while [[ $(kubectl get crs $(kubectl get crs -n argocd -o name) -n argocd -o 'jsonpath={.status.conditions[*].reason}') != "Issued" && $(kubectl get $(kubectl get crs -n argocd -o name) -n argocd -o 'jsonpath={.status.conditions[*].status}') != "True" ]]; do echo "waiting for crs" && sleep 10; done;
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'

        - - name: argocd-workflow
            templateRef:
              name: argocd-workflow-template
              template: argocd-workflow
            arguments:
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'
                - name: values
                  from: '{{steps.terraform.outputs.artifacts.values}}'
              parameters:
                - name: server-url
                  value: '{{steps.terraform.outputs.parameters.fqdn}}'
                - name: context
                  value: '{{item.context}}'
                - name: service
                  value: '{{item.service}}'
                - name: namespace
                  value: '{{item.namespace}}'
                - name: valuesScript
                  value: '{{item.valuesScript}}'
                - name: repo
                  value: '{{item.repo}}'
            withItems:
              - {
                  context: 'tooling',
                  service: 'prometheus',
                  repo: 'git@github.com:Open-Dataplatform/tooling-prometheus.git',
                  namespace: 'monitoring',
                  valuesScript: '--values-literal-file ../../../values/tooling-prometheus-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'thanos',
                  repo: 'git@github.com:Open-Dataplatform/tooling-thanos.git',
                  namespace: 'monitoring',
                  valuesScript: '--values-literal-file ../../../values/tooling-thanos-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'grafana',
                  repo: 'git@github.com:Open-Dataplatform/tooling-grafana.git',
                  namespace: 'grafana',
                  valuesScript: '--values-literal-file ../../../values/tooling-grafana-values.yaml',
                }
              # - {
              #     context: 'tooling',
              #     service: 'postgresql-ha',
              #     repo: 'git@github.com:Open-Dataplatform/tooling-postgresql-ha.git',
              #     namespace: 'vault',
              #     valuesScript: '--values-literal-file ../../../values/tooling-postgresql-values.yaml',
              #   }
              - {
                  context: 'tooling',
                  service: 'harbor',
                  repo: 'git@github.com:Open-Dataplatform/tooling-harbor.git',
                  namespace: 'harbor-system',
                  valuesScript: '--values-literal-file ../../../values/tooling-harbor-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'jaeger',
                  repo: 'git@github.com:Open-Dataplatform/tooling-jaeger.git',
                  namespace: 'monitoring',
                  valuesScript: '--values-literal-file ../../../values/tooling-jaeger-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'kibana',
                  repo: 'git@github.com:Open-Dataplatform/tooling-kibana.git',
                  namespace: 'monitoring',
                  valuesScript: '--values-literal-file ../../../values/tooling-kibana-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'vault',
                  repo: 'git@github.com:Open-Dataplatform/tooling-vault.git',
                  namespace: 'vault',
                  valuesScript: '--values-literal-file ../../../values/tooling-vault-values.yaml',
                }
              - {
                  context: 'tooling',
                  service: 'argo-wf',
                  repo: 'git@github.com:Open-Dataplatform/tooling-argo-wf.git',
                  namespace: 'argo',
                  valuesScript: '--values-literal-file ../../../values/tooling-argo-wf-values.yaml',
                }

        # - - name: argocd-sync-postgres
        #     templateRef:
        #       name: argocd-base-template
        #       template: argocd-base
        #     arguments:
        #       artifacts:
        #         - name: kube-config
        #           from: '{{steps.terraform.outputs.artifacts.kube-config}}'
        #       parameters:
        #         - name: server-url
        #           value: '{{steps.terraform.outputs.parameters.fqdn}}'
        #         - name: script
        #           value: >
        #             argocd app sync tooling-postgresql-ha;
        #             sh /scripts/gen-vault-config.sh $(kubectl get secret --namespace vault tooling-postgresql-ha-postgresql -o jsonpath="{.data.postgresql-password}" | base64 -d) vault

        # - - name: kubectl-wait-postgres
        #     templateRef:
        #       name: kubectl-base-template
        #       template: kubectl-base
        #     arguments:
        #       parameters:
        #         - name: script
        #           value: >
        #             echo "waiting for postgresql deployment";
        #             kubectl wait --for=condition=available --timeout=240s deployment/tooling-postgresql-ha-pgpool -n vault;
        #       artifacts:
        #         - name: kube-config
        #           from: '{{steps.terraform.outputs.artifacts.kube-config}}'

        - - name: argocd-sync-vault
            templateRef:
              name: argocd-base-template
              template: argocd-base
            arguments:
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'
              parameters:
                - name: server-url
                  value: '{{steps.terraform.outputs.parameters.fqdn}}'
                - name: script
                  value: >
                    argocd app sync tooling-vault;

        - - name: vault-unseal-vault
            templateRef:
              name: vault-workflow-template
              template: vault-workflow
            arguments:
              artifacts:
                - name: kube-config
                  from: '{{steps.terraform.outputs.artifacts.kube-config}}'
              parameters:
                - name: server-url
                  value: '{{steps.terraform.outputs.parameters.fqdn}}'
