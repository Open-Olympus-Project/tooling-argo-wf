apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: service-cluster-deployment-template
  namespace: argo
spec:
  entrypoint: service-cluster-deployment
  podGC:
    strategy: OnWorkflowSuccess
  arguments:
    parameters:
    - name: environment_name
      value: mht
    - name: resource_group_name
      value: service-aks-infrastructure-{{workflow.parameters.environment_name}}
    - name: storage_account_name
      value: serviceterraformstate{{workflow.parameters.environment_name}}
    - name: container_name
      value: terraformstate
    - name: key
      value: k8s.tfstate
  templates:
  - name: service-cluster-deployment 
    steps:
    - - name: terraform
        templateRef:
          name: terraform-workflow-template
          template: terraform-workflow
        arguments:
          parameters:
          - name: environmentName
            value: mht

    - - name: helm
        templateRef:
          name: helm-workflow-template
          template: helm-workflow
        arguments:
          parameters:
          - name: ssh-url
            value: "{{item.repo}}"
          - name: name
            value: "{{item.name}}"
          - name: namespace
            value: "{{item.namespace}}"
          - name: valuesScript
            value: "{{item.valuesScript}}"
          artifacts:
          - name: kube-config
            from: '{{steps.terraform.outputs.artifacts.kube-config}}'
          - name: values
            from: '{{steps.terraform.outputs.artifacts.values}}'
        withItems:
        - { name: 'ingress-nginx', namespace: 'ingress-nginx', valuesScript: '-f /values/k8s-ingress-nginx-values.yaml', repo: 'git@github.com:Open-Dataplatform/k8s-ingress-nginx.git' }
        - { name: 'cert-manager', namespace: 'cert-manager', valuesScript: ' ', repo: 'git@github.com:Open-Dataplatform/k8s-certmanager.git' }
        - { name: 'argocd', namespace: 'argocd', valuesScript: '-f /values/tooling-argo-cd-values.yaml', repo: 'git@github.com:Open-Dataplatform/tooling-argo-cd.git' }

      # Should use the helm wf repo?
      - name: clone-certmanager
        templateRef:
          name: git-clone-template
          template: git-clone
        arguments:
          parameters:
          - name: ssh-url
            value: git@github.com:Open-Dataplatform/k8s-certmanager.git

    - - name: kubectl-cluster-issuer
        templateRef:
          name: kubectl-base-template
          template: kubectl-base
        arguments:
          parameters:
          - name: script
            value: >
              kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=120s;
              kubectl apply -f ./cert-manager/clusterissuer.yaml -n cert-manager;
          artifacts:
          - name: kube-config
            from: '{{steps.terraform.outputs.artifacts.kube-config}}'
          - name: repo
            from: '{{steps.clone-certmanager.outputs.artifacts.repo}}'
      
      - name: kubectl-wait-argocd
        templateRef:
          name: kubectl-base-template
          template: kubectl-base
        arguments:
          parameters:
          - name: script
            value: >
              kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=120s;
              sh /scripts/check-endpoint.sh ingress-nginx-controller ingress-nginx;
          artifacts:
          - name: kube-config
            from: '{{steps.terraform.outputs.artifacts.kube-config}}'

    - - name: argocd-add-repos
        templateRef:
          name: argocd-base-template
          template: argocd-base
        arguments:
          artifacts:
          - name: kube-config
            from: '{{steps.terraform.outputs.artifacts.kube-config}}'
          parameters:
          - name: server-url
            value: '{{steps.terraform.outputs.parameters.fqdn}}'
          - name: script
            value: >
              argocd repo add {{item}} --ssh-private-key-path /vault/secrets/id_rsa
        withItems:
        - git@github.com:Open-Dataplatform/tooling-harbor.git
        - git@github.com:Open-Dataplatform/tooling-prometheus.git
        - git@github.com:Open-Dataplatform/tooling-grafana.git
        - git@github.com:Open-Dataplatform/tooling-thanos.git
        - git@github.com:Open-Dataplatform/tooling-vault.git

    - - name: argocd-add-apps
        templateRef: 
          name: argocd-base-template
          template: argocd-base
        arguments:
          artifacts:
          - name: kube-config
            from: '{{steps.terraform.outputs.artifacts.kube-config}}'
          - name: values
            from: '{{steps.terraform.outputs.artifacts.values}}'            
          parameters:
          - name: server-url
            value: '{{steps.terraform.outputs.parameters.fqdn}}'
          - name: script
            value: >
                argocd app create {{item.name}} --repo {{item.repo}} --path .helm --dest-server https://kubernetes.default.svc  --sync-option CreateNamespace=true --dest-namespace {{item.namespace}} --upsert --values-literal-file ../../../values/{{item.valuesName}};
        withItems:
        - { name: 'prometheus', repo: 'git@github.com:Open-Dataplatform/tooling-prometheus.git', namespace: 'monitoring', valuesName: 'tooling-prometheus-values.yaml' }
        - { name: 'thanos', repo: 'git@github.com:Open-Dataplatform/tooling-thanos.git', namespace: 'monitoring', valuesName: 'tooling-thanos-values.yaml' }
        - { name: 'grafana', repo: 'git@github.com:Open-Dataplatform/tooling-grafana.git', namespace: 'grafana', valuesName: 'tooling-grafana-values.yaml' }
        - { name: 'vault', repo: 'git@github.com:Open-Dataplatform/tooling-vault.git', namespcae: 'vault', vaulesName: 'tooling-vault-values.yaml' }