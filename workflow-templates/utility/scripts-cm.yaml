apiVersion: v1
kind: ConfigMap
metadata:
  name: argo-scripts
  namespace: argo
data:
  check-endpoint.sh: |
    #!/bin/bash
    # Pass the name of a service to check ie: sh check-endpoint.sh staging-voting-app-vote
    # Will run forever...
    external_ip=""
    while [ -z $external_ip ]; do
      echo "Waiting for end point..."
      external_ip=$(kubectl get svc $1 --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}" -n $2)
      [ -z "$external_ip" ] && sleep 10
    done
    echo 'End point ready:' && echo $external_ip

  gen-vault-config.sh: |
    #!/bin/sh
    echo "
    ui = true
    
    storage \"postgresql\" {
      # postgresql://[user[:password]@][netloc][:port][,...][/dbname][?param1=value1&...]
      connection_url = \"postgres://postgres:$1@tooling-postgresql-ha-postgresql.$2.svc.cluster.local:5432/vault?sslmode=disable\"
      table = \"vault_kv_store\"
      ha_enabled = \"true\"
      ha_table = \"vault_ha_locks\"
    }

    service_registration \"kubernetes\" {}" > config.hcl

    kubectl create secret generic vault-storage-config --from-file=config.hcl -n $2 --dry-run=client -o yaml | kubectl apply -f -