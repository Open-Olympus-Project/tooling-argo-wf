apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tooling-harbor-create-project-tp
  namespace: argo
spec:
  entrypoint: create-harbor-project
  arguments:
    parameters:
      - name: repo-name
        value: repo-name
      - name: is-public
        value: 'false'

  # Using the password from the secret has issues
  templates:
    - name: create-harbor-project
      metadata:
        annotations:
          vault.hashicorp.com/agent-inject: "true"
          vault.hashicorp.com/role: "k8s-secrets"
          vault.hashicorp.com/agent-inject-secret-harbor-creds: "k8s/data/secrets/harbor"
          vault.hashicorp.com/agent-inject-template-harbor-creds: |
            {{ with secret "k8s/data/secrets/harbor" -}}
              export harborUser="{{ .Data.data.username }}"
              export harborPass="{{ .Data.data.password }}"
            {{- end }}
          vault.hashicorp.com/agent-inject-secret-server-url: "k8s/data/configs/server-url"
          vault.hashicorp.com/agent-inject-template-server-url: |
            {{ with secret "k8s/data/configs/server-url" -}}
              export serverUrl="{{ .Data.data.url }}"
            {{- end }}
      inputs:
        parameters:
          - name: repo-name
            default: '{{inputs.parameters.repo-name}}'
          - name: is-public
            default: '{{inputs.parameters.is-public}}'
      container:
        image: alpine/k8s:1.13.12
        command: [sh, -c]
        args: 
          - >
            for f in /vault/secrets/*; do source $f; done;

            response=$(curl -u "$harborUser:$harborPass" --head "https://$serverUrl/api/v2.0/projects?project_name={{inputs.parameters.repo-name}}" -H  "accept: application/json" --silent --write-out %{http_code} --output /dev/null ${url});

            if [[ "$response" -eq 404 ]];
            then
              response=$(curl -u "$harborUser:$harborPass" -X POST -H "accept: application/json" -H "Content-Type: application/json" "https://$serverUrl/api/v2.0/projects" -d "{  
              \"project_name\": \"{{inputs.parameters.repo-name}}\",  
              \"public\": {{inputs.parameters.is-public}}
              }" --write-out %{http_code} --silent --output /dev/null ${url});

              if [[ "$response" -ne 201  ]];
              then
                echo "curl failed with error code $response"
                exit 90;
              else 
                echo "Project was created";
              fi
              
              echo -n false > /tmp/project-exists;
            else
              echo -n true > /tmp/project-exists;
            fi
      outputs:
        parameters:
        - name: project-exists
          valueFrom:
            default: "true"   # Default value to use if retrieving valueFrom fails. If not provided workflow will fail instead
            path: /tmp/project-exists